{"version":3,"sources":["utils/auth-client.js","utils/client.js","App.jsx","serviceWorker.js","context/index.js","index.jsx","context/auth-context.js"],"names":["handleUserResponse","user","window","localStorage","setItem","LOCAL_STORAGE_KEY","username","location","replace","login","password","client","body","then","register","email","console","log","logout","removeItem","assign","getToken","getItem","getUser","token","catch","err","Promise","resolve","endpoint","a","file","customConfig","headers","Authorization","config","method","JSON","stringify","fetch","response","status","reject","message","json","data","ok","onSuccess","redirectTo","AuthenticatedApp","React","UnauthenticatedApp","App","useUser","fallback","Boolean","hostname","match","AppProviders","children","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","AuthContext","createContext","AuthProvider","props","useState","setData","useEffect","authClient","Provider","value","form","updateUser","newUser","useAuth","useContext"],"mappings":"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","file":"static/js/main.f9f6b9a6.chunk.js","sourcesContent":["import { client, LOCAL_STORAGE_KEY } from './client';\n\nfunction handleUserResponse(user) {\n  window.localStorage.setItem(LOCAL_STORAGE_KEY, user.username);\n  // redirect user to homepage\n  window.location.replace('/');\n  return user;\n}\n\nfunction login({ username, password }) {\n  return client('/users/login', { body: { username, password } }).then(\n    handleUserResponse\n  );\n}\n\nfunction register({ username, email, password }) {\n  console.log(username, email, password);\n  return client('/users/register', {\n    body: { username, email, password },\n  }).then(handleUserResponse);\n}\n\nfunction logout() {\n  window.localStorage.removeItem(LOCAL_STORAGE_KEY);\n\n  // refreshes the page for the user\n  window.location.assign(window.location);\n}\n\nfunction getToken() {\n  return window.localStorage.getItem(LOCAL_STORAGE_KEY);\n}\n\nfunction getUser() {\n  const token = getToken();\n  if (!token) {\n    return Promise.resolve(null);\n  }\n  return client(`/users/${token}`).catch((err) => {\n    logout();\n    return null;\n  });\n}\n\nfunction isLoggedIn() {\n  return Boolean(getToken());\n}\n\nexport { login, register, logout, getToken, getUser, isLoggedIn };\n","import { logout } from './auth-client';\n\n// endpoint should start with a /\n\n// customConfig params\n// - headers\n// - method\n// - body : will be JSONified.\n// - file (There is some unique things about files)!\n// - onSuccess : fn to execute on success\n// - redirectTo: string (starting with /)\n\nexport const LOCAL_STORAGE_KEY = 'token';\n\nexport async function client(endpoint, { body, file, ...customConfig } = {}) {\n  const token = window.localStorage.getItem(LOCAL_STORAGE_KEY);\n  const headers = { 'Content-Type': 'application/json' };\n\n  if (token) {\n    headers.Authorization = `${token}`;\n  }\n\n  const config = {\n    method: customConfig.method ?? (body || file ? 'POST' : 'GET'),\n    headers: {\n      ...headers,\n      ...customConfig.headers,\n    },\n  };\n\n  console.log(config);\n\n  if (file) {\n    config.body = file;\n    delete config.headers['Content-Type'];\n  }\n\n  if (body) {\n    config.body = JSON.stringify(body);\n  }\n\n  return await fetch(`/api${endpoint}`, config).then(async (response) => {\n    if (response.status === 401) {\n      logout();\n      // TODO: shoule we refresh the page for them or redirect to login page ???\n      // window.location.assign(window.location);\n      window.location.assign('/login');\n      return Promise.reject({ message: 'Please re-authenticate.' });\n    }\n\n    const data = await response.json();\n\n    if (response.ok) {\n      if (\n        customConfig.onSuccess &&\n        typeof customConfig.onSuccess === 'function'\n      ) {\n        customConfig.onSuccess();\n      }\n\n      if (customConfig.redirectTo) {\n        window.location.assign(customConfig.redirectTo);\n        return;\n      }\n\n      return Promise.resolve(data);\n    } else {\n      return Promise.reject(data);\n    }\n  });\n}\n","import * as React from 'react';\nimport { useUser } from './context/auth-context';\n\nconst AuthenticatedApp = React.lazy(() => import('./authenticated-app'));\nconst UnauthenticatedApp = React.lazy(() => import('./unauthenticated-app'));\n\nfunction App() {\n  const user = useUser();\n  return (\n    <React.Suspense fallback={<div>Loading...</div>}>\n      {user ? <AuthenticatedApp /> : <UnauthenticatedApp />}\n    </React.Suspense>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { AuthProvider } from './auth-context';\n\nfunction AppProviders({ children }) {\n  return <AuthProvider>{children}</AuthProvider>;\n}\nexport default AppProviders;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './tailwind.output.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport AppProviders from './context';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppProviders>\n      <App />\n    </AppProviders>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState, useEffect } from 'react';\nimport * as authClient from '../utils/auth-client';\n\nconst AuthContext = React.createContext({});\n\nfunction AuthProvider(props) {\n  const [data, setData] = useState({\n    status: 'pending',\n    user: null,\n  });\n\n  useEffect(() => {\n    authClient\n      .getUser()\n      .then((user) => setData({ status: 'success', user }))\n      .catch((err) => {\n        console.error(err);\n        authClient.logout();\n        setData({ ...data, status: 'success' });\n      });\n  }, []);\n\n  // 🚨 this is the important bit.\n  // Normally your provider components render the context provider with a value.\n  // But we post-pone rendering any of the children until after we've determined\n  // whether or not we have a user token and if we do, then we render a spinner\n  // while we go retrieve that user's information.\n  if (data.status === 'pending') {\n    return 'Loading...';\n  }\n\n  const login = (form) =>\n    authClient.login(form).then((user) => setData({ user })); // make a login request\n  const register = (form) =>\n    authClient.register(form).then((user) => setData({ user })); // register the user\n  const logout = () => {\n    authClient.logout();\n    setData({ user: null });\n  }; // clear the token in window.localStorage and the user data\n  const updateUser = (newUser) => {\n    setData({ user: newUser });\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{ data, login, logout, register, updateUser }}\n      {...props}\n    />\n  );\n}\n\nconst useAuth = () => React.useContext(AuthContext);\nconst useUser = () => useAuth().data.user;\n\nexport { AuthProvider, useAuth, useUser };\n"],"sourceRoot":""}